/*
 * WeatherAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using WeatherAPI.Standard;
using WeatherAPI.Standard.Utilities;


namespace WeatherAPI.Standard.Models
{
    public class ForecastJsonResponse : BaseModel 
    {
        // These fields hold the values for the public properties.
        private Models.Location location;
        private Models.Current current;
        private Models.Forecast forecast;
        public IEnumerable<Hour> ForecastHours
        {
            get
            {
                // Assuming `Forecast.Forecastday` contains a list of daily forecasts
                return Forecast.Forecastday.SelectMany(day => day.Hours);
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("location")]
        public Models.Location Location 
        { 
            get 
            {
                return this.location; 
            } 
            set 
            {
                this.location = value;
                OnPropertyChanged("Location");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("current")]
        public Models.Current Current 
        { 
            get 
            {
                return this.current; 
            } 
            set 
            {
                this.current = value;
                OnPropertyChanged("Current");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("forecast")]
        public Models.Forecast Forecast 
        { 
            get 
            {
                return this.forecast; 
            } 
            set 
            {
                this.forecast = value;
                OnPropertyChanged("Forecast");
            }
        }
    }
} 